syntax = "proto3";
package day_trader;

service Quote {
  // Get the current quote for the stock for the specified user
  rpc Quote(QuoteRequest) returns (QuoteResponse);
}

service Log {
  // Print out the history of the users transactions to the user specified file
  rpc DumpLogUser(DumpLogUserRequest) returns (DumpLogUserResponse);
  // Print out to the specified file the complete set of transactions that have occurred in the system.
  rpc DumpLog(DumpLogRequest) returns (DumpLogResponse);
  // Provides a summary to the client of the given user's transaction history and the current status of their accounts as well as any set buy or sell triggers and their parameters
  rpc DisplaySummary(DisplaySummaryRequest) returns (DisplaySummaryResponse);
  // insert UserCommand into log db
  rpc InsertUserCommand(InsertUserCommandRequest) returns (InsertUserCommandResponse);
  // insert AccountTransaction into log db
  rpc InsertAccountTransaction(InsertAccountTransactionRequest) returns (InsertAccountTransactionResponse);
  // insert SystemEvent into log db
  rpc InsertSystemEvent(InsertSystemEventRequest) returns (InsertSystemEventResponse);
  // insert QuoteServer into log db
  rpc InsertQuoteServer(InsertQuoteServerRequest) returns (InsertQuoteServerResponse);
  // insert ErrorEvent into log db
  rpc InsertErrorEvent(InsertErrorEventRequest) returns (InsertErrorEventResponse);
}

service Transaction {
  // Add the given amount of money to the user's account
  rpc Add(AddRequest) returns (AddResponse);
  // Buy the dollar amount of the stock for the specified user at the current price.
  rpc Buy(BuyRequest) returns (BuyResponse);
  // Commits the most recently executed BUY command
  rpc CommitBuy(CommitBuyRequest) returns (CommitBuyResponse);
  // Cancels the most recently executed BUY Command
  rpc CancelBuy(CancelBuyRequest) returns (CancelBuyResponse);
  // Sell the specified dollar mount of the stock currently held by the specified user at the current price.
  rpc Sell(SellRequest) returns (SellResponse);
  // Commits the most recently executed SELL command
  rpc CommitSell(CommitSellRequest) returns (CommitSellResponse);
  // Cancels the most recently executed SELL Command
  rpc CancelSell(CancelSellRequest) returns (CancelSellResponse);
  // Gets the users balance and stocks owned
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // Creates a user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
}

service Trigger {
  // Sets a defined amount of the given stock to buy when the current stock price is less than or equal to the BUY_TRIGGER
  rpc SetBuyAmount(SetBuyAmountRequest) returns (SetBuyAmountResponse);
  // Cancels a SET_BUY command issued for the given stock
  rpc CancelSetBuy(CancelSetBuyRequest) returns (CancelSetBuyResponse);
  // Sets the trigger point base on the current stock price when any SET_BUY will execute.
  rpc SetBuyTrigger(SetBuyTriggerRequest) returns (SetBuyTriggerResponse);
  // Sets a defined amount of the specified stock to sell when the current stock price is equal or greater than the sell trigger point
  rpc SetSellAmount(SetSellAmountRequest) returns (SetSellAmountResponse);
  // Sets the stock price trigger point for executing any SET_SELL triggers associated with the given stock and user
  rpc SetSellTrigger(SetSellTriggerRequest) returns (SetSellTriggerResponse);
  // Cancels the SET_SELL associated with the given stock and user
  rpc CancelSetSell(CancelSetSellRequest) returns (CancelSetSellResponse);
}

message AddRequest {
  string user_id = 1;
  float amount = 2;
}

message AddResponse {
  float balance = 1;
}

message QuoteRequest {
  string user_id = 1;
  string stock_symbol = 2;
}

message QuoteResponse {
  float quote = 1;
  string sym = 2;
  string user_id = 3;
  uint64 timestamp = 4;
  string crypto_key = 5;
}

message BuyRequest {
  string user_id = 1;
  string stock_symbol = 2;
  float amount = 3;
}

message BuyResponse {
  float shares = 1;
  bool success = 2;
}

message CommitBuyRequest{
  string user_id = 1;
}

message CommitBuyResponse {
  float stocksOwned = 1;
  float balance = 2;
  bool success = 3;
}

message CancelBuyRequest {string user_id = 1;}
message  CancelBuyResponse {
  bool success = 1;
}

message SellRequest {
  string user_id = 1;
  string stock_symbol = 2;
  float amount = 3;
}
message SellResponse {
  float amount = 1;
  float shares = 2;
  bool success = 3;
}

message CommitSellRequest {
  string user_id = 1;
}
message  CommitSellResponse {
  float stocksOwned = 1;
  float balance = 2;
  bool success = 3;
}
message CancelSellRequest {
  string user_id = 1;
}
message  CancelSellResponse {
  bool success = 1;
}
message GetUserRequest {
  string user_id = 1;
}
message GetUserResponse {
  string username = 1;
  float balance = 2;
  string role = 3;
  bool success = 4;
  repeated OwnedStock owned_stock = 5;
  repeated BuyTrigger buy_triggers = 6;
  repeated SellTrigger sell_triggers = 7;
}

message OwnedStock {
  int32 id = 1;
  string username = 2;
  string stock = 3;
  float shares = 4;
}

message BuyTrigger {
  int32 id = 1;
  string username = 2;
  string stock = 3;
  float trigger_amount = 4;
  float buy_amount = 5;
}

message SellTrigger {
  int32 id = 1;
  string username = 2;
  string stock = 3;
  float trigger_amount = 4;
  float shares_to_sell = 5;
}

message CreateUserRequest {
  string user_id = 1;
}
message  CreateUserResponse {
  string username = 1;
  bool success = 2;
}
message SetBuyAmountRequest {
  string user_id = 1;
  string stock_symbol = 2;
  float amount = 3;
}
message  SetBuyAmountResponse {
  float balance = 1;
  float buy_amount = 2;
  bool success = 3;
}
message CancelSetBuyRequest {
  string user_id = 1;
  string stock_symbol = 2;
}
message  CancelSetBuyResponse {
  bool success = 1;
}
message SetBuyTriggerRequest {
  string user_id = 1;
  string stock_symbol = 2;
  float amount = 3;
}
message  SetBuyTriggerResponse {
  float trigger_amount = 1;
  string stock = 2;
  bool success = 3;
}
message SetSellAmountRequest {
  string user_id = 1;
  string stock_symbol = 2;
  float amount = 3;
}
message  SetSellAmountResponse {
  float currentStockPrice = 1;
  float numSharesToSell = 2;
  bool success = 3;
}
message SetSellTriggerRequest {
  string user_id = 1;
  string stock_symbol = 2;
  float amount = 3;
}
message  SetSellTriggerResponse {

}
message CancelSetSellRequest {
  string user_id = 1;
  string stock_symbol = 2;
}
message  CancelSetSellResponse {}
message DumpLogUserRequest  {
  string user_id = 1;
  string filename = 2;
}
message  DumpLogUserResponse {}
message DumpLogRequest {
  string filename = 1;
}
message  DumpLogResponse {}
message DisplaySummaryRequest {
  string user_id = 1;
}
message  DisplaySummaryResponse {}

message InsertUserCommandRequest {
  string server = 1;
  string command = 2;
  string username = 3;
  string stockSymbol = 4;
  float funds = 5;
}
message InsertUserCommandResponse {}

message InsertAccountTransactionRequest {
  string server = 1;
  string action = 2;
  string username = 3;
  float funds = 4;
}
message InsertAccountTransactionResponse {}

message InsertSystemEventRequest {
  string server = 1;
  string command = 2;
  string username = 3;
  string stockSymbol = 4;
  float funds = 5;
}
message InsertSystemEventResponse {}

message InsertQuoteServerRequest {
  string server = 1;
  int64 quoteServerTime = 2;
  string username = 3;
  string stockSymbol = 4;
  float price = 5;
  string cryptokey = 6;
}
message InsertQuoteServerResponse {}

message InsertErrorEventRequest {
  string server = 1;
  string command = 2;
  string username = 3;
  string stockSymbol = 4;
  float funds = 5;
  string errorMessage = 6;
}
message InsertErrorEventResponse {}