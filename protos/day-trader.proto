syntax = "proto3";
package day_trader;

service DayTrader {
  // Print out the history of the users transactions to the user specified file
  rpc DumpLogUser(DumpLogUserRequest) returns (DumpLogUserResponse);
  // Print out to the specified file the complete set of transactions that have occurred in the system.
  rpc DumpLog(DumpLogRequest) returns (DumpLogResponse);
  // Provides a summary to the client of the given user's transaction history and the current status of their accounts as well as any set buy or sell triggers and their parameters
  rpc DisplaySummary(DisplaySummaryRequest) returns (DisplaySummaryResponse);
  // Add the given amount of money to the user's account
  rpc Add(AddRequest) returns (AddResponse);
  // Buy the dollar amount of the stock for the specified user at the current price.
  rpc Buy(BuyRequest) returns (BuyResponse);
  // Commits the most recently executed BUY command
  rpc CommitBuy(CommitBuyRequest) returns (CommitBuyResponse);
  // Cancels the most recently executed BUY Command
  rpc CancelBuy(CancelBuyRequest) returns (CancelBuyResponse);
  // Sell the specified dollar mount of the stock currently held by the specified user at the current price.
  rpc Sell(SellRequest) returns (SellResponse);
  // Commits the most recently executed SELL command
  rpc CommitSell(CommitSellRequest) returns (CommitSellResponse);
  // Cancels the most recently executed SELL Command
  rpc CancelSell(CancelSellRequest) returns (CancelSellResponse);
  // Sets a defined amount of the given stock to buy when the current stock price is less than or equal to the BUY_TRIGGER
  rpc SetBuyAmount(SetBuyAmountRequest) returns (SetBuyAmountResponse);
  // Cancels a SET_BUY command issued for the given stock
  rpc CancelSetBuy(CancelSetBuyRequest) returns (CancelSetBuyResponse);
  // Sets the trigger point base on the current stock price when any SET_BUY will execute.
  rpc SetBuyTrigger(SetBuyTriggerRequest) returns (SetBuyTriggerResponse);
  // Sets a defined amount of the specified stock to sell when the current stock price is equal or greater than the sell trigger point
  rpc SetSellAmount(SetSellAmountRequest) returns (SetSellAmountResponse);
  // Sets the stock price trigger point for executing any SET_SELL triggers associated with the given stock and user
  rpc SetSellTrigger(SetSellTriggerRequest) returns (SetSellTriggerResponse);
  // Cancels the SET_SELL associated with the given stock and user
  rpc CancelSetSell(CancelSetSellRequest) returns (CancelSetSellResponse);
  // Get all stocks from cache
  rpc GetAllStocks(GetAllStocksRequest) returns (GetAllStocksResponse);
  // Get User Info
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);
  // login
  rpc Login(LoginRequest) returns (LoginResponse);

  rpc Quote(QuoteRequest) returns (QuoteRequestSimple);
}

message QuoteRequestSimple {
  double price = 1;
}

// actually hits the quote server.
service Quote {
  // Get the current quote for the stock for the specified user
  rpc Quote(QuoteRequest) returns (QuoteResponse);
}

message GetAllStocksRequest {
}

message Stock {
  string name = 1;
  double price = 2;
}

message GetAllStocksResponse {
  repeated Stock stocks = 1;
}

message LoginRequest {
  string user_id = 1;
}

message LoginResponse {
  string user_id = 1;
  bool success = 2;
}

message GetUserInfoRequest {
  string user_id = 1;
}

message GetUserInfoResponse {
  string balance = 1;
  repeated Stock stock = 2;
  repeated SellTrigger SellTriggers = 3;
  repeated BuyTrigger BuyTriggers = 4;
}

message AddRequest {
  string user_id = 1;
  double amount = 2;
  int32 request_num = 3;
}

message AddResponse {
  bool success = 1;
}

message QuoteRequest {
  string user_id = 1;
  string stock_symbol = 2;
  int32 request_num = 3;
}

message QuoteResponse {
  double quote = 1;
  string sym = 2;
  string user_id = 3;
  uint64 timestamp = 4;
  string crypto_key = 5;
}

message BuyRequest {
  string user_id = 1;
  string stock_symbol = 2;
  double amount = 3;
  int32 request_num = 4;
}

message BuyResponse {
  bool success = 1;
}

message CommitBuyRequest{
  string user_id = 1;
  int32 request_num = 2;
}

message CommitBuyResponse {
  bool success = 1;
}

message CancelBuyRequest {
  string user_id = 1;
  int32 request_num = 2;
}
message CancelBuyResponse {
  bool success = 1;
}

message SellRequest {
  string user_id = 1;
  string stock_symbol = 2;
  double amount = 3;
  int32 request_num = 4;
}
message SellResponse {
  bool success = 1;
}

message CommitSellRequest {
  string user_id = 1;
  int32 request_num = 2;
}
message  CommitSellResponse {
  bool success = 1;
}
message CancelSellRequest {
  string user_id = 1;
  int32 request_num = 2;
}
message  CancelSellResponse {
  bool success = 1;
}
message GetUserRequest {
  string user_id = 1;
}
message GetUserResponse {
  string username = 1;
  double balance = 2;
  string role = 3;
  bool success = 4;
  repeated OwnedStock owned_stock = 5;
  repeated BuyTrigger buy_triggers = 6;
  repeated SellTrigger sell_triggers = 7;
}

message OwnedStock {
  string stock = 3;
  double shares = 4;
}

message BuyTrigger {
  int32 id = 1;
  string username = 2;
  string stock = 3;
  double trigger_amount = 4;
  double buy_amount = 5;
}

message SellTrigger {
  int32 id = 1;
  string username = 2;
  string stock = 3;
  double trigger_amount = 4;
  double shares_to_sell = 5;
}

message CreateUserRequest {
  string user_id = 1;
}
message CreateUserResponse {
  string username = 1;
  bool success = 2;
}
message SetBuyAmountRequest {
  string user_id = 1;
  string stock_symbol = 2;
  double amount = 3;
  int32 request_num = 4;
}
message SetBuyAmountResponse {
  bool success = 1;
}

message CancelSetBuyRequest {
  string user_id = 1;
  string stock_symbol = 2;
  int32 request_num = 3;
}
message  CancelSetBuyResponse {
}
message SetBuyTriggerRequest {
  string user_id = 1;
  string stock_symbol = 2;
  double amount = 3;
  int32 request_num = 4;
}
message  SetBuyTriggerResponse {
  bool success = 1;
}
message SetSellAmountRequest {
  string user_id = 1;
  string stock_symbol = 2;
  double amount = 3;
  int32 request_num = 4;
}
message  SetSellAmountResponse {
  bool success = 1;
}
message SetSellTriggerRequest {
  string user_id = 1;
  string stock_symbol = 2;
  double amount = 3;
  int32 request_num = 4;
}
message SetSellTriggerResponse {
  bool success = 1;
}
message CancelSetSellRequest {
  string user_id = 1;
  string stock_symbol = 2;
  int32 request_num = 3;
}
message  CancelSetSellResponse {}
message DumpLogUserRequest  {
  string user_id = 1;
  string filename = 2;
  int32 request_num = 3;
}
message  DumpLogUserResponse {
  string xml = 1;
}
message DumpLogRequest {
  string filename = 1;
  int32 request_num = 2;
}
message DumpLogResponse {
  string xml = 1;
}
message DisplaySummaryRequest {
  string user_id = 1;
  int32 request_num = 2;
}
message DisplaySummaryResponse {
  repeated UserCommand user_commands = 1;
  repeated AccountTransaction account_transactions = 2;
}

message UserCommand {
  int32 transaction_num = 1;
  uint64 timestamp = 2;
  string server = 3;
  string command = 4;
  string username = 5;
  string stock_symbol = 6;
  double funds = 7;
}

message AccountTransaction {
  int32 transaction_num = 1;
  uint64 timestamp = 2;
  string server = 3;
  string action = 4;
  string username = 5;
  double funds = 6;
}

message InsertUserCommandRequest {
  string server = 1;
  string command = 2;
  string username = 3;
  string stockSymbol = 4;
  double funds = 5;
}
message InsertUserCommandResponse {
  int32 transaction_num = 1;
  uint64 timestamp = 2;
  string server = 3;
  string command = 4;
  string username = 5;
  string stock_symbol = 6;
  double funds = 7;
}

message InsertAccountTransactionRequest {
  string server = 1;
  string action = 2;
  string username = 3;
  double funds = 4;
}
message InsertAccountTransactionResponse {
  int32 transaction_num = 1;
  uint64 timestamp = 2;
  string server = 3;
  string action = 4;
  string username = 5;
  double funds = 6;
}

message InsertSystemEventRequest {
  string server = 1;
  string command = 2;
  string username = 3;
  string stockSymbol = 4;
  double funds = 5;
}
message InsertSystemEventResponse {
  int32 transaction_num = 1;
  uint64 timestamp = 2;
  string server = 3;
  string command = 4;
  string username = 5;
  string stock_symbol = 6;
  double funds = 7;
}

message InsertQuoteServerRequest {
  string server = 1;
  uint64 quoteServerTime = 2;
  string username = 3;
  string stockSymbol = 4;
  double price = 5;
  string cryptokey = 6;
}
message InsertQuoteServerResponse {
  int32 transaction_num = 1;
  uint64 timestamp = 2;
  string server = 3;
  int64 quote_server_time = 4;
  string username = 5;
  string stock_symbol = 6;
  double price = 7;
  string crypto_key = 8;
}

message InsertErrorEventRequest {
  string server = 1;
  string command = 2;
  string username = 3;
  string stockSymbol = 4;
  double funds = 5;
  string errorMessage = 6;
}
message InsertErrorEventResponse {
  int32 transaction_num = 1;
  int64 timestamp = 2;
  string server = 3;
  string command = 4;
  string username = 5;
  string stock_symbol = 6;
  double funds = 7;
  string error_message = 8;
}